{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#cluster as string\n",
        "#Precision on kmeans\n",
        "#Kmeans++\n",
        "#Number of clusters\n",
        "#best model?\n",
        "#Explain kmenas\n",
        "#silhouette and elbow\n",
        "#normalizar as variáveis para não dar peso maior para variáveis com valores mais altos\n",
        "#como usar as categoricas no kmeans?\n",
        "#No kmeans do H2O eu acho que posso usar a base inteiro no treino, test + train\n",
        "#ou se não eu posso descobrir como usar a base de test para calcular o presion do kmeans como a Carol fez\n",
        "#Testar um modelo de SHAP com a base balanceada entre os clusters?"
      ],
      "outputs": [],
      "execution_count": 62,
      "metadata": {
        "gather": {
          "logged": 1668732653719
        }
      },
      "id": "21ed5382-726c-4435-901e-497332b58799"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Train and Compare Machine Learning Models\n",
        "* To succecfully run this notebook you need a python3.7 kernel with requirements in ./sagemaker-custom-image/requirements.txt"
      ],
      "metadata": {
        "tags": []
      },
      "id": "9b9a345b"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## This notebook will help you to do:\n",
        "* Import train and test data\n",
        "* Run many ML algorithms using H2O AutoML\n",
        "* Compare all model performance in test dataset\n",
        "* Choosing and save the best model"
      ],
      "metadata": {
        "papermill": {
          "duration": 0.04859,
          "end_time": "2021-04-22T18:42:32.131294",
          "exception": false,
          "start_time": "2021-04-22T18:42:32.082704",
          "status": "completed"
        },
        "tags": []
      },
      "id": "7e1cd532"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Parameters"
      ],
      "metadata": {
        "papermill": {
          "duration": 0.046916,
          "end_time": "2021-04-22T18:42:32.225806",
          "exception": false,
          "start_time": "2021-04-22T18:42:32.178890",
          "status": "completed"
        },
        "tags": []
      },
      "id": "bc9fc03d"
    },
    {
      "cell_type": "code",
      "source": [
        "#Name\n",
        "ModelName = 'titanic_segmentation_model'\n",
        "\n",
        "#Setting the VarId and VarDate parameters\n",
        "VarId = 'PassengerId'\n",
        "VarDate = 'ReferenceDate'\n",
        "\n",
        "#process outputs such as MOJO model, images and performance of tested models\n",
        "OutputPath = './output_model/'\n",
        "\n",
        "#If you have a huge dataset, I should consider use a small sample for first execution\n",
        "PctSampleSize = 1\n",
        "\n",
        "\n",
        "#Version\n",
        "ModelVersion = 'v1'\n",
        "\n",
        "#Model ID\n",
        "ModelId = ModelName+'_'+ModelVersion\n",
        "\n",
        "#It is necessary to define the types of variables (cageroric and numeric) to ensure that the type of data used in the modeling will be the most suitable.\n",
        "#For example, categorical variables need to be defined as a string because this prevents it from being treated as a numeric variable in H20 modeling\n",
        "#Another example is that the string variables will have a missing treatment by placing the missing category for all values found as 'null'\n",
        "CAT = ['Pclass'\n",
        ",'Embarked'\n",
        ",'cabine_prefix'\n",
        ",'Ticket_str'\n",
        ",'NameTitle'\n",
        ",'Sex']\n",
        "\n",
        "#float\n",
        "NUM = ['Fare'\n",
        ",'SibSp'\n",
        ",'Parch'\n",
        ",'Age_Mean'\n",
        ",'Ticket_int']\n",
        "selected_features = CAT + NUM"
      ],
      "outputs": [],
      "execution_count": 19,
      "metadata": {
        "gather": {
          "logged": 1668732689618
        },
        "papermill": {
          "duration": 0.055908,
          "end_time": "2021-04-22T18:42:32.329142",
          "exception": false,
          "start_time": "2021-04-22T18:42:32.273234",
          "status": "completed"
        },
        "tags": []
      },
      "id": "066f3b3e"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. Import Libraries"
      ],
      "metadata": {
        "papermill": {
          "duration": 0.047515,
          "end_time": "2021-04-22T18:42:32.423393",
          "exception": false,
          "start_time": "2021-04-22T18:42:32.375878",
          "status": "completed"
        },
        "tags": []
      },
      "id": "194dae3d"
    },
    {
      "cell_type": "code",
      "source": [
        "!pip -q install -r requirements.txt"
      ],
      "outputs": [],
      "execution_count": 41,
      "metadata": {},
      "id": "a8805da3-ba7c-4020-be1c-376147ddbee5"
    },
    {
      "cell_type": "code",
      "source": [
        "import functools\n",
        "import os\n",
        "from time import gmtime, strftime, sleep\n",
        "import datetime as dt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import altair as alt\n",
        "import glob\n",
        "import h2o\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import metrics\n",
        "import shutil\n",
        "import seaborn as sns\n",
        "from io import StringIO\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\", category=FutureWarning)"
      ],
      "outputs": [],
      "execution_count": 42,
      "metadata": {
        "gather": {
          "logged": 1668732707541
        },
        "papermill": {
          "duration": 9.765238,
          "end_time": "2021-04-22T18:42:42.235677",
          "exception": false,
          "start_time": "2021-04-22T18:42:32.470439",
          "status": "completed"
        },
        "tags": []
      },
      "id": "d9fe0364"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Importing Data for Modeling"
      ],
      "metadata": {
        "papermill": {
          "duration": 0.045874,
          "end_time": "2021-04-22T18:42:42.327994",
          "exception": false,
          "start_time": "2021-04-22T18:42:42.282120",
          "status": "completed"
        },
        "tags": []
      },
      "id": "31e39df3"
    },
    {
      "cell_type": "code",
      "source": [
        "dataprep_df_full = pd.read_csv('./titanic/dataprep_df.csv')"
      ],
      "outputs": [],
      "execution_count": 25,
      "metadata": {
        "gather": {
          "logged": 1668732734663
        }
      },
      "id": "b1365408"
    },
    {
      "cell_type": "code",
      "source": [
        "dataprep_df_full.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 26,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Embarked</th>\n      <th>cabine_prefix</th>\n      <th>Ticket_str</th>\n      <th>NameTitle</th>\n      <th>Sex</th>\n      <th>Fare</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Age_Mean</th>\n      <th>...</th>\n      <th>dummy_NameTitle_Mr</th>\n      <th>dummy_NameTitle_Mrs</th>\n      <th>dummy_NameTitle_Ms</th>\n      <th>dummy_NameTitle_Sir</th>\n      <th>dummy_Sex_male</th>\n      <th>normalized_Fare</th>\n      <th>normalized_SibSp</th>\n      <th>normalized_Parch</th>\n      <th>normalized_Age_Mean</th>\n      <th>normalized_Ticket_int</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>S</td>\n      <td>missing</td>\n      <td>A</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>7.2500</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>22.000000</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.029290</td>\n      <td>0.2</td>\n      <td>0.0</td>\n      <td>0.293286</td>\n      <td>0.168049</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>C</td>\n      <td>C</td>\n      <td>PC</td>\n      <td>Mrs</td>\n      <td>female</td>\n      <td>71.2833</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>38.000000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.287989</td>\n      <td>0.2</td>\n      <td>0.0</td>\n      <td>0.510737</td>\n      <td>0.005675</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>S</td>\n      <td>C</td>\n      <td>missing</td>\n      <td>Mrs</td>\n      <td>female</td>\n      <td>53.1000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>35.000000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.214527</td>\n      <td>0.2</td>\n      <td>0.0</td>\n      <td>0.469965</td>\n      <td>0.036695</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>S</td>\n      <td>missing</td>\n      <td>missing</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>8.0500</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>35.000000</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.032523</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.469965</td>\n      <td>0.120417</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>Q</td>\n      <td>missing</td>\n      <td>missing</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>8.4583</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>29.699118</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0.034172</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.397922</td>\n      <td>0.106689</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 60 columns</p>\n</div>",
            "text/plain": "   Pclass Embarked cabine_prefix Ticket_str NameTitle     Sex     Fare  SibSp  \\\n0       3        S       missing          A        Mr    male   7.2500    1.0   \n1       1        C             C         PC       Mrs  female  71.2833    1.0   \n2       1        S             C    missing       Mrs  female  53.1000    1.0   \n3       3        S       missing    missing        Mr    male   8.0500    0.0   \n4       3        Q       missing    missing        Mr    male   8.4583    0.0   \n\n   Parch   Age_Mean  ...  dummy_NameTitle_Mr  dummy_NameTitle_Mrs  \\\n0    0.0  22.000000  ...                   1                    0   \n1    0.0  38.000000  ...                   0                    1   \n2    0.0  35.000000  ...                   0                    1   \n3    0.0  35.000000  ...                   1                    0   \n4    0.0  29.699118  ...                   1                    0   \n\n  dummy_NameTitle_Ms dummy_NameTitle_Sir  dummy_Sex_male  normalized_Fare  \\\n0                  0                   0               1         0.029290   \n1                  0                   0               0         0.287989   \n2                  0                   0               0         0.214527   \n3                  0                   0               1         0.032523   \n4                  0                   0               1         0.034172   \n\n   normalized_SibSp  normalized_Parch  normalized_Age_Mean  \\\n0               0.2               0.0             0.293286   \n1               0.2               0.0             0.510737   \n2               0.2               0.0             0.469965   \n3               0.0               0.0             0.469965   \n4               0.0               0.0             0.397922   \n\n   normalized_Ticket_int  \n0               0.168049  \n1               0.005675  \n2               0.036695  \n3               0.120417  \n4               0.106689  \n\n[5 rows x 60 columns]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 26,
      "metadata": {
        "gather": {
          "logged": 1668732739146
        }
      },
      "id": "cb9a284f-c10b-4e3f-9749-d5894306c03b"
    },
    {
      "cell_type": "code",
      "source": [
        "#Work with a sample data if the PctSampleSize is less than 1\n",
        "if PctSampleSize == 1:\n",
        "    dataprep_df = dataprep_df_full.copy()\n",
        "else:\n",
        "    dataprep_df = dataprep_df_full.sample(frac=PctSampleSize, replace=False, random_state=1)\n",
        "del dataprep_df_full"
      ],
      "outputs": [],
      "execution_count": 27,
      "metadata": {
        "gather": {
          "logged": 1668732744978
        },
        "papermill": {
          "duration": 0.054085,
          "end_time": "2021-04-22T18:42:42.984342",
          "exception": false,
          "start_time": "2021-04-22T18:42:42.930257",
          "status": "completed"
        },
        "tags": []
      },
      "id": "ff809ba1"
    },
    {
      "cell_type": "code",
      "source": [
        "#List all dummies and normalized variables\n",
        "normalized_and_dummy = []\n",
        "for i in dataprep_df.columns:\n",
        "    if (i.startswith('dummy_')) or (i.startswith('normalized_')):\n",
        "        normalized_and_dummy.append(i)\n",
        "# normalized_and_dummy"
      ],
      "outputs": [],
      "execution_count": 70,
      "metadata": {},
      "id": "5b9958ae-006e-416e-89a2-1c0e54eeb2c8"
    },
    {
      "cell_type": "code",
      "source": [
        "#Numeric features must be float type\n",
        "for col_name in (NUM + normalized_and_dummy):\n",
        "    dataprep_df[col_name] = dataprep_df[col_name].astype(float)\n",
        "\n",
        "#Categorical features must be string type and null values will be filled with \"missing\"\n",
        "for col_name in CAT:\n",
        "    dataprep_df[col_name] = dataprep_df[col_name].astype(str)"
      ],
      "outputs": [],
      "execution_count": 69,
      "metadata": {
        "gather": {
          "logged": 1668732748080
        },
        "papermill": {
          "duration": 1.860101,
          "end_time": "2021-04-22T18:45:15.821982",
          "exception": false,
          "start_time": "2021-04-22T18:45:13.961881",
          "status": "completed"
        },
        "tags": []
      },
      "id": "10f40f8d"
    },
    {
      "cell_type": "code",
      "source": [
        "#plot the final dataset with time period, train and test definitions\n",
        "dataprep_target = dataprep_df[[VarDate, VarId, 'dataset']].groupby(by=[VarDate, 'dataset']).agg({VarId:'count'})\n",
        "dataprep_target[VarId].plot(secondary_y=False, kind='bar', rot=90, figsize=(15,5), linewidth=2, fontsize=12, grid=True, legend=1, title=(\"# Observations\"))"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 31,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f881b71e970>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 1500x500 with 1 Axes>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 31,
      "metadata": {
        "gather": {
          "logged": 1668732776959
        }
      },
      "id": "a154fd86"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3.1 Treatment of Numeric Missing Data"
      ],
      "metadata": {},
      "id": "6723de5a"
    },
    {
      "cell_type": "code",
      "source": [
        "#Create the \"Missing\" category for missing values in string vaviables\n",
        "# dataprep_df = dataprep_df.apply(lambda x: x.fillna(np.nan) if x.dtype.kind in 'biufc' else x.fillna('Missing'))"
      ],
      "outputs": [],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1668732783221
        }
      },
      "id": "899aa941"
    },
    {
      "cell_type": "code",
      "source": [
        "#Tratamento da idade\n",
        "# dataprep_df['age_mean'] = dataprep_df['age'].fillna(dataprep_df['age'].mean())"
      ],
      "outputs": [],
      "execution_count": 10,
      "metadata": {
        "gather": {
          "logged": 1668732783631
        }
      },
      "id": "ecbf9803"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3.2 Outliers Removing"
      ],
      "metadata": {},
      "id": "9ad40624"
    },
    {
      "cell_type": "code",
      "source": [
        "# var = 'max_salary_offered_to_prev_application'\n",
        "\n",
        "# q_low = dataprep_df[var].quantile(0.00012)\n",
        "# q_hi  = dataprep_df[var].quantile(0.9999)\n",
        "# print('Low: ' + str(q_low))\n",
        "# print('High: ' + str(q_hi))\n",
        "# print('Reduction: ' \n",
        "#       + \"{0:.2%}\".format(len(dataprep_df[(dataprep_df[var] <= q_hi) & (dataprep_df[var] >= q_low)])/len(dataprep_df)-1) \n",
        "#       + \" | \" \n",
        "#       + str(len(dataprep_df)-len(dataprep_df[(dataprep_df[var] <= q_hi) & (dataprep_df[var] >= q_low)])))\n",
        "\n",
        "# def plot_comparison(x, title, low, high):\n",
        "#     fig, ax = plt.subplots(3, 1, sharex=True, constrained_layout=True, figsize=(15,5))\n",
        "#     fig.suptitle(title, fontsize=16)\n",
        "#     sns.distplot(x.rename(\"\"), ax=ax[0])\n",
        "#     ax[0].set_title('Histogram + KDE')\n",
        "#     sns.boxplot(x.rename(\"\"), ax=ax[1])\n",
        "#     ax[1].set_title('Boxplot')\n",
        "#     sns.violinplot(x.rename(\"\"), ax=ax[2])\n",
        "#     ax[2].set_title('Violin plot')\n",
        "#     # only one line may be specified; full height\n",
        "#     ax[1].axvline(x = low, color = 'red')\n",
        "#     ax[1].axvline(x = high, color = 'red')\n",
        "#     plt.show()\n",
        "    \n",
        "# plot_comparison(dataprep_df[var], var, q_low, q_hi)\n",
        "\n",
        "# dataprep_df = dataprep_df[(dataprep_df[var] <= q_hi) & (dataprep_df[var] >= q_low)]"
      ],
      "outputs": [],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1668732784846
        }
      },
      "id": "ed9f0165"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Number of Clusters"
      ],
      "metadata": {},
      "id": "b453a634-9fe1-4849-b4ed-a6af18283c85"
    },
    {
      "cell_type": "code",
      "source": [
        "# When features have different scale we have to scale them so that we can use them together\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {},
      "id": "36209416-f9e9-4367-8240-96cffcf0063e"
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler() \n",
        "# scaler = RobustScaler()  # Take the robust scaler when data contains outliers that you want to remove"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {},
      "id": "13c4da64-e6de-474c-b5dd-60e76bfb4393"
    },
    {
      "cell_type": "code",
      "source": [
        "dataprep_scaled = scaler.fit_transform(dataprep_df)\n",
        "dataprep_scaled"
      ],
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "could not convert string to float: 'S'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "Cell \u001b[0;32mIn [14], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m dataprep_scaled \u001b[38;5;241m=\u001b[39m \u001b[43mscaler\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdataprep_df\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m dataprep_scaled\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/sklearn/base.py:571\u001b[0m, in \u001b[0;36mTransformerMixin.fit_transform\u001b[0;34m(self, X, y, **fit_params)\u001b[0m\n\u001b[1;32m    567\u001b[0m \u001b[38;5;66;03m# non-optimized default implementation; override when a better\u001b[39;00m\n\u001b[1;32m    568\u001b[0m \u001b[38;5;66;03m# method is possible for a given clustering algorithm\u001b[39;00m\n\u001b[1;32m    569\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    570\u001b[0m     \u001b[38;5;66;03m# fit method of arity 1 (unsupervised transformation)\u001b[39;00m\n\u001b[0;32m--> 571\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mfit_params\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mtransform(X)\n\u001b[1;32m    572\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    573\u001b[0m     \u001b[38;5;66;03m# fit method of arity 2 (supervised transformation)\u001b[39;00m\n\u001b[1;32m    574\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfit(X, y, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mfit_params)\u001b[38;5;241m.\u001b[39mtransform(X)\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/sklearn/preprocessing/_data.py:669\u001b[0m, in \u001b[0;36mStandardScaler.fit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    667\u001b[0m \u001b[38;5;66;03m# Reset internal state before fitting\u001b[39;00m\n\u001b[1;32m    668\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reset()\n\u001b[0;32m--> 669\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpartial_fit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m)\u001b[49m\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/sklearn/preprocessing/_data.py:698\u001b[0m, in \u001b[0;36mStandardScaler.partial_fit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    671\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpartial_fit\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, y\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    672\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    673\u001b[0m \u001b[38;5;124;03m    Online computation of mean and std on X for later scaling.\u001b[39;00m\n\u001b[1;32m    674\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    696\u001b[0m \u001b[38;5;124;03m        Transformer instance.\u001b[39;00m\n\u001b[1;32m    697\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 698\u001b[0m     X \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mcsc\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    699\u001b[0m \u001b[43m                    \u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mFLOAT_DTYPES\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    700\u001b[0m \u001b[43m                    \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mallow-nan\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    702\u001b[0m     \u001b[38;5;66;03m# Even in the case of `with_mean=False`, we update the mean anyway\u001b[39;00m\n\u001b[1;32m    703\u001b[0m     \u001b[38;5;66;03m# This is needed for the incremental computation of the var\u001b[39;00m\n\u001b[1;32m    704\u001b[0m     \u001b[38;5;66;03m# See incr_mean_variance_axis and _incremental_mean_variance_axis\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    707\u001b[0m     \u001b[38;5;66;03m# transform it to a NumPy array of shape (n_features,) required by\u001b[39;00m\n\u001b[1;32m    708\u001b[0m     \u001b[38;5;66;03m# incr_mean_variance_axis and _incremental_variance_axis\u001b[39;00m\n\u001b[1;32m    709\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m (\u001b[38;5;28mhasattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_samples_seen_\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;129;01mand\u001b[39;00m\n\u001b[1;32m    710\u001b[0m             \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_samples_seen_, numbers\u001b[38;5;241m.\u001b[39mIntegral)):\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/sklearn/utils/validation.py:531\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    529\u001b[0m         array \u001b[38;5;241m=\u001b[39m array\u001b[38;5;241m.\u001b[39mastype(dtype, casting\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124munsafe\u001b[39m\u001b[38;5;124m\"\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m    530\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 531\u001b[0m         array \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43masarray\u001b[49m\u001b[43m(\u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    532\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m ComplexWarning:\n\u001b[1;32m    533\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mComplex data not supported\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    534\u001b[0m                      \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(array))\n",
            "File \u001b[0;32m/anaconda/envs/azureml_py38/lib/python3.8/site-packages/pandas/core/generic.py:1993\u001b[0m, in \u001b[0;36mNDFrame.__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   1992\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__array__\u001b[39m(\u001b[38;5;28mself\u001b[39m, dtype: NpDtype \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m np\u001b[38;5;241m.\u001b[39mndarray:\n\u001b[0;32m-> 1993\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43masarray\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_values\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'S'"
          ]
        }
      ],
      "execution_count": 14,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "outputs_hidden": true
        },
        "tags": [],
        "gather": {
          "logged": 1669054224278
        }
      },
      "id": "668b5c75-410e-4da1-9c36-69c73c636b7b"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import silhouette_score, davies_bouldin_score"
      ],
      "outputs": [],
      "execution_count": 32,
      "metadata": {},
      "id": "23ed28d3-52de-48ef-a476-6f83c7d6ee52"
    },
    {
      "cell_type": "code",
      "source": [
        "normalized_and_dummy"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {},
      "id": "0cf149c3-2355-4c2f-9830-64aaeb0ab36a"
    },
    {
      "cell_type": "code",
      "source": [
        "km = KMeans(n_clusters=3, random_state=1301).fit(dataprep_df[normalized_and_dummy])\n",
        "km"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 33,
          "data": {
            "text/plain": "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n       n_clusters=3, n_init=10, n_jobs=None, precompute_distances='auto',\n       random_state=1301, tol=0.0001, verbose=0)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 33,
      "metadata": {},
      "id": "fd9a20d2-f3cd-4a5d-95c6-d39b021a3e22"
    },
    {
      "cell_type": "code",
      "source": [
        "preds = km.predict(dataprep_df[normalized_and_dummy])\n",
        "preds"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 34,
          "data": {
            "text/plain": "array([1, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2, 1, 1, 2, 0, 1, 1, 0, 0, 1, 1, 2,\n       1, 2, 0, 1, 2, 1, 1, 0, 2, 1, 1, 1, 1, 1, 2, 2, 0, 0, 1, 2, 2, 1,\n       1, 2, 1, 0, 1, 1, 0, 0, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 0, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1,\n       2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 0, 1, 1,\n       2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 0, 1, 1, 1, 0, 1, 2, 1, 0, 2, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1,\n       1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       0, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 0, 1, 1, 1, 0, 1,\n       1, 0, 0, 0, 2, 0, 1, 1, 1, 1, 2, 1, 1, 1, 0, 2, 1, 1, 0, 1, 2, 2,\n       2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 1, 2, 1, 1, 1, 2,\n       1, 0, 2, 1, 1, 2, 1, 1, 2, 0, 1, 2, 2, 0, 1, 1, 2, 0, 1, 2, 0, 1,\n       1, 2, 0, 2, 1, 0, 0, 2, 2, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 0, 1, 1, 1, 0,\n       0, 2, 2, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 2, 2, 0, 1, 1, 1, 2, 1, 2,\n       1, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1,\n       0, 0, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 2, 1, 1, 1, 0, 0, 1, 2, 2, 0,\n       1, 0, 1, 1, 0, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 0, 2, 1, 1, 1, 1, 2, 1, 1, 1,\n       0, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1,\n       0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 2, 1, 1, 0, 1, 1, 2, 1, 1,\n       1, 2, 1, 1, 0, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 2, 1, 0, 0, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1, 0, 1,\n       2, 1, 1, 2, 0, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 2, 1, 1, 2,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 2, 1, 1, 2, 1, 0, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 1, 0, 2,\n       1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 2, 1, 1, 1, 0, 1, 2, 1, 0,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 0, 2, 1, 2, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 1, 1, 0, 1, 0, 1, 2, 1, 1, 1, 1, 0, 1, 0, 1, 1, 2, 1, 0, 2, 0,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 2, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1,\n       2, 2, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 2, 1, 1, 1, 1, 0, 1, 1, 0,\n       2, 1, 1, 1, 0, 0, 1, 2, 1, 1, 0, 1, 2, 2, 1, 1], dtype=int32)"
          },
          "metadata": {}
        }
      ],
      "execution_count": null,
      "metadata": {},
      "id": "c84e64c7-4d43-44d0-ae2a-da75d3cd1b1d"
    },
    {
      "cell_type": "code",
      "source": [
        "km_scores= []\n",
        "km_silhouette = []\n",
        "km_db_score = []"
      ],
      "outputs": [],
      "execution_count": 35,
      "metadata": {},
      "id": "3cf6d3f2-b3af-4a5f-96bf-24970a305dc9"
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'Score for number of cluster(s) {i}: {km.score(dataprep_df[normalized_and_dummy]):.3f}')\n",
        "km_scores.append(-km.score(dataprep_df[normalized_and_dummy]))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Score for number of cluster(s) normalized_Ticket_int: -1434.556\n"
        }
      ],
      "execution_count": 36,
      "metadata": {},
      "id": "4daf6948-600e-414f-a11c-a9ceb51517c5"
    },
    {
      "cell_type": "code",
      "source": [
        "km_scores= []\n",
        "km_silhouette = []\n",
        "km_db_score = []\n",
        "for i in range(2, dataprep_df[normalized_and_dummy].shape[1]):\n",
        "    km = KMeans(n_clusters=i, random_state=1301).fit(dataprep_df[normalized_and_dummy])\n",
        "    preds = km.predict(dataprep_df[normalized_and_dummy])\n",
        "    \n",
        "    print(f'Score for number of cluster(s) {i}: {km.score(dataprep_df[normalized_and_dummy]):.3f}')\n",
        "    km_scores.append(-km.score(dataprep_df[normalized_and_dummy]))\n",
        "    \n",
        "    silhouette = silhouette_score(dataprep_df[normalized_and_dummy],preds)\n",
        "    km_silhouette.append(silhouette)\n",
        "    print(f'Silhouette score for number of cluster(s) {i}: {silhouette:.3f}')\n",
        "    \n",
        "    db = davies_bouldin_score(dataprep_df[normalized_and_dummy],preds)\n",
        "    km_db_score.append(db)\n",
        "    print(f'Davies Bouldin score for number of cluster(s) {i}: {db:.3f}')\n",
        "    \n",
        "    print('-'*100)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Score for number of cluster(s) 2: -1588.762\nSilhouette score for number of cluster(s) 2: 0.274\nDavies Bouldin score for number of cluster(s) 2: 1.738\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 3: -1434.556\nSilhouette score for number of cluster(s) 3: 0.291\nDavies Bouldin score for number of cluster(s) 3: 1.680\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 4: -1233.418\nSilhouette score for number of cluster(s) 4: 0.273\nDavies Bouldin score for number of cluster(s) 4: 1.754\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 5: -1159.128\nSilhouette score for number of cluster(s) 5: 0.294\nDavies Bouldin score for number of cluster(s) 5: 1.703\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 6: -1087.483\nSilhouette score for number of cluster(s) 6: 0.264\nDavies Bouldin score for number of cluster(s) 6: 1.646\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 7: -1002.690\nSilhouette score for number of cluster(s) 7: 0.306\nDavies Bouldin score for number of cluster(s) 7: 1.522\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 8: -927.236\nSilhouette score for number of cluster(s) 8: 0.306\nDavies Bouldin score for number of cluster(s) 8: 1.533\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 9: -859.688\nSilhouette score for number of cluster(s) 9: 0.328\nDavies Bouldin score for number of cluster(s) 9: 1.418\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 10: -818.013\nSilhouette score for number of cluster(s) 10: 0.336\nDavies Bouldin score for number of cluster(s) 10: 1.435\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 11: -782.859\nSilhouette score for number of cluster(s) 11: 0.348\nDavies Bouldin score for number of cluster(s) 11: 1.397\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 12: -734.047\nSilhouette score for number of cluster(s) 12: 0.358\nDavies Bouldin score for number of cluster(s) 12: 1.344\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 13: -714.018\nSilhouette score for number of cluster(s) 13: 0.360\nDavies Bouldin score for number of cluster(s) 13: 1.351\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 14: -678.001\nSilhouette score for number of cluster(s) 14: 0.377\nDavies Bouldin score for number of cluster(s) 14: 1.406\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 15: -644.565\nSilhouette score for number of cluster(s) 15: 0.388\nDavies Bouldin score for number of cluster(s) 15: 1.366\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 16: -614.907\nSilhouette score for number of cluster(s) 16: 0.402\nDavies Bouldin score for number of cluster(s) 16: 1.384\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 17: -588.768\nSilhouette score for number of cluster(s) 17: 0.408\nDavies Bouldin score for number of cluster(s) 17: 1.308\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 18: -571.362\nSilhouette score for number of cluster(s) 18: 0.415\nDavies Bouldin score for number of cluster(s) 18: 1.319\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 19: -552.127\nSilhouette score for number of cluster(s) 19: 0.420\nDavies Bouldin score for number of cluster(s) 19: 1.326\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 20: -542.342\nSilhouette score for number of cluster(s) 20: 0.419\nDavies Bouldin score for number of cluster(s) 20: 1.310\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 21: -536.852\nSilhouette score for number of cluster(s) 21: 0.422\nDavies Bouldin score for number of cluster(s) 21: 1.284\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 22: -518.940\nSilhouette score for number of cluster(s) 22: 0.442\nDavies Bouldin score for number of cluster(s) 22: 1.204\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 23: -500.712\nSilhouette score for number of cluster(s) 23: 0.448\nDavies Bouldin score for number of cluster(s) 23: 1.214\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 24: -492.626\nSilhouette score for number of cluster(s) 24: 0.448\nDavies Bouldin score for number of cluster(s) 24: 1.240\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 25: -482.169\nSilhouette score for number of cluster(s) 25: 0.452\nDavies Bouldin score for number of cluster(s) 25: 1.197\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 26: -474.709\nSilhouette score for number of cluster(s) 26: 0.450\nDavies Bouldin score for number of cluster(s) 26: 1.241\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 27: -460.966\nSilhouette score for number of cluster(s) 27: 0.455\nDavies Bouldin score for number of cluster(s) 27: 1.192\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 28: -450.148\nSilhouette score for number of cluster(s) 28: 0.460\nDavies Bouldin score for number of cluster(s) 28: 1.157\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 29: -441.414\nSilhouette score for number of cluster(s) 29: 0.458\nDavies Bouldin score for number of cluster(s) 29: 1.268\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 30: -431.006\nSilhouette score for number of cluster(s) 30: 0.472\nDavies Bouldin score for number of cluster(s) 30: 1.123\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 31: -419.235\nSilhouette score for number of cluster(s) 31: 0.476\nDavies Bouldin score for number of cluster(s) 31: 1.126\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 32: -411.082\nSilhouette score for number of cluster(s) 32: 0.486\nDavies Bouldin score for number of cluster(s) 32: 1.195\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 33: -404.031\nSilhouette score for number of cluster(s) 33: 0.493\nDavies Bouldin score for number of cluster(s) 33: 1.176\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 34: -391.663\nSilhouette score for number of cluster(s) 34: 0.497\nDavies Bouldin score for number of cluster(s) 34: 1.148\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 35: -383.140\nSilhouette score for number of cluster(s) 35: 0.497\nDavies Bouldin score for number of cluster(s) 35: 1.162\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 36: -376.812\nSilhouette score for number of cluster(s) 36: 0.498\nDavies Bouldin score for number of cluster(s) 36: 1.149\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 37: -373.099\nSilhouette score for number of cluster(s) 37: 0.502\nDavies Bouldin score for number of cluster(s) 37: 1.130\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 38: -364.845\nSilhouette score for number of cluster(s) 38: 0.508\nDavies Bouldin score for number of cluster(s) 38: 1.085\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 39: -354.262\nSilhouette score for number of cluster(s) 39: 0.514\nDavies Bouldin score for number of cluster(s) 39: 1.068\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 40: -349.678\nSilhouette score for number of cluster(s) 40: 0.513\nDavies Bouldin score for number of cluster(s) 40: 1.109\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 41: -342.627\nSilhouette score for number of cluster(s) 41: 0.521\nDavies Bouldin score for number of cluster(s) 41: 1.096\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 42: -337.631\nSilhouette score for number of cluster(s) 42: 0.524\nDavies Bouldin score for number of cluster(s) 42: 1.086\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 43: -330.538\nSilhouette score for number of cluster(s) 43: 0.526\nDavies Bouldin score for number of cluster(s) 43: 1.065\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 44: -324.828\nSilhouette score for number of cluster(s) 44: 0.524\nDavies Bouldin score for number of cluster(s) 44: 1.133\n----------------------------------------------------------------------------------------------------\nScore for number of cluster(s) 45: -315.839\nSilhouette score for number of cluster(s) 45: 0.534\nDavies Bouldin score for number of cluster(s) 45: 1.057\n----------------------------------------------------------------------------------------------------\n"
        }
      ],
      "execution_count": 37,
      "metadata": {
        "tags": []
      },
      "id": "ac166120-5d5d-48eb-ba01-0cfd56eb7bde"
    },
    {
      "cell_type": "code",
      "source": [
        "df_plot = pd.DataFrame({'Number of clusters':[i for i in range(2,dataprep_df[normalized_and_dummy].shape[1])],'kmean score': km_scores})\n",
        "alt.Chart(df_plot).mark_line(point=True).encode(\n",
        "    x=alt.X('Number of clusters:N', axis=alt.Axis(labelAngle=0)),\n",
        "    y=alt.Y('kmean score'),\n",
        "    tooltip=[alt.Tooltip('kmean score', format='.2f')]\n",
        ").properties(\n",
        "    title='Kmean score ifo number of cluster'\n",
        ").properties(\n",
        "    title='The elbow method for determining number of clusters',\n",
        "    width=400\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 43,
          "data": {
            "text/html": "\n<div id=\"altair-viz-e407f698aa304d138940d1738c16e3f8\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-e407f698aa304d138940d1738c16e3f8\") {\n      outputDiv = document.getElementById(\"altair-viz-e407f698aa304d138940d1738c16e3f8\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-4cad84afea28a1f0fb2a09bdff15c013\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"tooltip\": [{\"field\": \"kmean score\", \"format\": \".2f\", \"type\": \"quantitative\"}], \"x\": {\"axis\": {\"labelAngle\": 0}, \"field\": \"Number of clusters\", \"type\": \"nominal\"}, \"y\": {\"field\": \"kmean score\", \"type\": \"quantitative\"}}, \"title\": \"The elbow method for determining number of clusters\", \"width\": 400, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-4cad84afea28a1f0fb2a09bdff15c013\": [{\"Number of clusters\": 2, \"kmean score\": 1588.7619017383734}, {\"Number of clusters\": 3, \"kmean score\": 1434.5557878681998}, {\"Number of clusters\": 4, \"kmean score\": 1233.417615324558}, {\"Number of clusters\": 5, \"kmean score\": 1159.127514347264}, {\"Number of clusters\": 6, \"kmean score\": 1087.4827552128645}, {\"Number of clusters\": 7, \"kmean score\": 1002.6903865654547}, {\"Number of clusters\": 8, \"kmean score\": 927.2362269015248}, {\"Number of clusters\": 9, \"kmean score\": 859.6880877716271}, {\"Number of clusters\": 10, \"kmean score\": 818.0133600891919}, {\"Number of clusters\": 11, \"kmean score\": 782.8588223628675}, {\"Number of clusters\": 12, \"kmean score\": 734.0472819292967}, {\"Number of clusters\": 13, \"kmean score\": 714.0182701546628}, {\"Number of clusters\": 14, \"kmean score\": 678.0013304831351}, {\"Number of clusters\": 15, \"kmean score\": 644.5650876111733}, {\"Number of clusters\": 16, \"kmean score\": 614.9066105123936}, {\"Number of clusters\": 17, \"kmean score\": 588.7683681937046}, {\"Number of clusters\": 18, \"kmean score\": 571.3621903588869}, {\"Number of clusters\": 19, \"kmean score\": 552.12677429417}, {\"Number of clusters\": 20, \"kmean score\": 542.3422910284281}, {\"Number of clusters\": 21, \"kmean score\": 536.85166807142}, {\"Number of clusters\": 22, \"kmean score\": 518.9402023277825}, {\"Number of clusters\": 23, \"kmean score\": 500.7118352131987}, {\"Number of clusters\": 24, \"kmean score\": 492.62641993060356}, {\"Number of clusters\": 25, \"kmean score\": 482.1686896585346}, {\"Number of clusters\": 26, \"kmean score\": 474.7094730602368}, {\"Number of clusters\": 27, \"kmean score\": 460.9662813788724}, {\"Number of clusters\": 28, \"kmean score\": 450.1477106465407}, {\"Number of clusters\": 29, \"kmean score\": 441.413502027199}, {\"Number of clusters\": 30, \"kmean score\": 431.00641138713456}, {\"Number of clusters\": 31, \"kmean score\": 419.23466143066605}, {\"Number of clusters\": 32, \"kmean score\": 411.08193198419644}, {\"Number of clusters\": 33, \"kmean score\": 404.0314977774074}, {\"Number of clusters\": 34, \"kmean score\": 391.6628538489242}, {\"Number of clusters\": 35, \"kmean score\": 383.13972901132956}, {\"Number of clusters\": 36, \"kmean score\": 376.81245264922865}, {\"Number of clusters\": 37, \"kmean score\": 373.0992556706705}, {\"Number of clusters\": 38, \"kmean score\": 364.8454725037725}, {\"Number of clusters\": 39, \"kmean score\": 354.2620495719956}, {\"Number of clusters\": 40, \"kmean score\": 349.6779033890832}, {\"Number of clusters\": 41, \"kmean score\": 342.6274691822942}, {\"Number of clusters\": 42, \"kmean score\": 337.63073111972517}, {\"Number of clusters\": 43, \"kmean score\": 330.5380594515317}, {\"Number of clusters\": 44, \"kmean score\": 324.82803236945637}, {\"Number of clusters\": 45, \"kmean score\": 315.8391873661617}]}}, {\"mode\": \"vega-lite\"});\n</script>",
            "text/plain": "alt.Chart(...)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 43,
      "metadata": {},
      "id": "5aec29db-2c4c-47cd-8cee-e795500da7be"
    },
    {
      "cell_type": "code",
      "source": [
        "df_plot = pd.DataFrame({'Number of clusters':[i for i in range(2,dataprep_df[normalized_and_dummy].shape[1])],'silhouette score': km_silhouette})\n",
        "alt.Chart(df_plot).mark_line(point=True).encode(\n",
        "    x=alt.X('Number of clusters:N', axis=alt.Axis(labelAngle=0)),\n",
        "    y=alt.Y('silhouette score'),\n",
        "    tooltip=[alt.Tooltip('silhouette score', format='.2f')]\n",
        ").properties(\n",
        "    title='Silhouette  score ifo number of cluster',\n",
        "    width=400\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 44,
          "data": {
            "text/html": "\n<div id=\"altair-viz-65422cff15624597988814145be2e454\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-65422cff15624597988814145be2e454\") {\n      outputDiv = document.getElementById(\"altair-viz-65422cff15624597988814145be2e454\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-06facf0b38ce777c7e0c08160d485026\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"tooltip\": [{\"field\": \"silhouette score\", \"format\": \".2f\", \"type\": \"quantitative\"}], \"x\": {\"axis\": {\"labelAngle\": 0}, \"field\": \"Number of clusters\", \"type\": \"nominal\"}, \"y\": {\"field\": \"silhouette score\", \"type\": \"quantitative\"}}, \"title\": \"Silhouette  score ifo number of cluster\", \"width\": 400, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-06facf0b38ce777c7e0c08160d485026\": [{\"Number of clusters\": 2, \"silhouette score\": 0.27394709761917274}, {\"Number of clusters\": 3, \"silhouette score\": 0.29084401999295106}, {\"Number of clusters\": 4, \"silhouette score\": 0.27343534301998157}, {\"Number of clusters\": 5, \"silhouette score\": 0.29447668995518006}, {\"Number of clusters\": 6, \"silhouette score\": 0.26442910609014136}, {\"Number of clusters\": 7, \"silhouette score\": 0.30576722667156353}, {\"Number of clusters\": 8, \"silhouette score\": 0.3062506404814858}, {\"Number of clusters\": 9, \"silhouette score\": 0.32807778936777404}, {\"Number of clusters\": 10, \"silhouette score\": 0.33571587972039313}, {\"Number of clusters\": 11, \"silhouette score\": 0.3475837909904733}, {\"Number of clusters\": 12, \"silhouette score\": 0.3582453942344034}, {\"Number of clusters\": 13, \"silhouette score\": 0.3596312644215315}, {\"Number of clusters\": 14, \"silhouette score\": 0.37673158405402635}, {\"Number of clusters\": 15, \"silhouette score\": 0.3882450745686533}, {\"Number of clusters\": 16, \"silhouette score\": 0.4022832366368353}, {\"Number of clusters\": 17, \"silhouette score\": 0.4082539879766269}, {\"Number of clusters\": 18, \"silhouette score\": 0.41526866654970584}, {\"Number of clusters\": 19, \"silhouette score\": 0.4195691302068864}, {\"Number of clusters\": 20, \"silhouette score\": 0.41863941085091066}, {\"Number of clusters\": 21, \"silhouette score\": 0.42214490483360284}, {\"Number of clusters\": 22, \"silhouette score\": 0.44212333437905377}, {\"Number of clusters\": 23, \"silhouette score\": 0.44823148696214926}, {\"Number of clusters\": 24, \"silhouette score\": 0.44800928193346007}, {\"Number of clusters\": 25, \"silhouette score\": 0.45161356413636405}, {\"Number of clusters\": 26, \"silhouette score\": 0.4495337253423813}, {\"Number of clusters\": 27, \"silhouette score\": 0.4551244650542091}, {\"Number of clusters\": 28, \"silhouette score\": 0.4599029217213377}, {\"Number of clusters\": 29, \"silhouette score\": 0.45769379135718247}, {\"Number of clusters\": 30, \"silhouette score\": 0.4724771141467813}, {\"Number of clusters\": 31, \"silhouette score\": 0.4762031433407281}, {\"Number of clusters\": 32, \"silhouette score\": 0.4859858789418322}, {\"Number of clusters\": 33, \"silhouette score\": 0.49262934308648665}, {\"Number of clusters\": 34, \"silhouette score\": 0.49704232262549086}, {\"Number of clusters\": 35, \"silhouette score\": 0.49675281471714877}, {\"Number of clusters\": 36, \"silhouette score\": 0.4983196630500092}, {\"Number of clusters\": 37, \"silhouette score\": 0.5019978051613079}, {\"Number of clusters\": 38, \"silhouette score\": 0.5079613097924479}, {\"Number of clusters\": 39, \"silhouette score\": 0.5135141049139016}, {\"Number of clusters\": 40, \"silhouette score\": 0.5131848634175631}, {\"Number of clusters\": 41, \"silhouette score\": 0.5214935791900432}, {\"Number of clusters\": 42, \"silhouette score\": 0.5235979844067601}, {\"Number of clusters\": 43, \"silhouette score\": 0.5263238077518151}, {\"Number of clusters\": 44, \"silhouette score\": 0.5240924855832398}, {\"Number of clusters\": 45, \"silhouette score\": 0.5344194779449607}]}}, {\"mode\": \"vega-lite\"});\n</script>",
            "text/plain": "alt.Chart(...)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 44,
      "metadata": {},
      "id": "7ba4be69-71f9-4cd5-a15f-40e638215191"
    },
    {
      "cell_type": "code",
      "source": [
        "df_plot = pd.DataFrame({'Number of clusters':[i for i in range(2, dataprep_df[normalized_and_dummy].shape[1])],'davies bouldin score': km_db_score})\n",
        "alt.Chart(df_plot).mark_line(point=True).encode(\n",
        "    x=alt.X('Number of clusters:N', axis=alt.Axis(labelAngle=0)),\n",
        "    y=alt.Y('davies bouldin score'),\n",
        "    tooltip=[alt.Tooltip('davies bouldin score', format='.2f')]\n",
        ").properties(\n",
        "    title='Davies Bouldin score ifo number of cluster',\n",
        "    width=400\n",
        ")"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 46,
          "data": {
            "text/html": "\n<div id=\"altair-viz-a2ddedc247774f6490612f334d7dc902\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-a2ddedc247774f6490612f334d7dc902\") {\n      outputDiv = document.getElementById(\"altair-viz-a2ddedc247774f6490612f334d7dc902\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.17.0?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"4.17.0\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-600b91ff1275f93ee48339ef94c0f990\"}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"tooltip\": [{\"field\": \"davies bouldin score\", \"format\": \".2f\", \"type\": \"quantitative\"}], \"x\": {\"axis\": {\"labelAngle\": 0}, \"field\": \"Number of clusters\", \"type\": \"nominal\"}, \"y\": {\"field\": \"davies bouldin score\", \"type\": \"quantitative\"}}, \"title\": \"Davies Bouldin score ifo number of cluster\", \"width\": 400, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.17.0.json\", \"datasets\": {\"data-600b91ff1275f93ee48339ef94c0f990\": [{\"Number of clusters\": 2, \"davies bouldin score\": 1.7379290963879475}, {\"Number of clusters\": 3, \"davies bouldin score\": 1.6804554656619872}, {\"Number of clusters\": 4, \"davies bouldin score\": 1.7537238776328619}, {\"Number of clusters\": 5, \"davies bouldin score\": 1.7032227029753557}, {\"Number of clusters\": 6, \"davies bouldin score\": 1.645893993574593}, {\"Number of clusters\": 7, \"davies bouldin score\": 1.5217933104721595}, {\"Number of clusters\": 8, \"davies bouldin score\": 1.5332079910587117}, {\"Number of clusters\": 9, \"davies bouldin score\": 1.4183454944183163}, {\"Number of clusters\": 10, \"davies bouldin score\": 1.434852056431488}, {\"Number of clusters\": 11, \"davies bouldin score\": 1.3972903497773486}, {\"Number of clusters\": 12, \"davies bouldin score\": 1.3439402205809519}, {\"Number of clusters\": 13, \"davies bouldin score\": 1.3507334173198653}, {\"Number of clusters\": 14, \"davies bouldin score\": 1.4058224654480262}, {\"Number of clusters\": 15, \"davies bouldin score\": 1.3656264937286198}, {\"Number of clusters\": 16, \"davies bouldin score\": 1.3844678221324087}, {\"Number of clusters\": 17, \"davies bouldin score\": 1.3075415696408808}, {\"Number of clusters\": 18, \"davies bouldin score\": 1.3186992709387222}, {\"Number of clusters\": 19, \"davies bouldin score\": 1.3264172201127127}, {\"Number of clusters\": 20, \"davies bouldin score\": 1.309931682577964}, {\"Number of clusters\": 21, \"davies bouldin score\": 1.284231280946491}, {\"Number of clusters\": 22, \"davies bouldin score\": 1.204219531848297}, {\"Number of clusters\": 23, \"davies bouldin score\": 1.2143614539205037}, {\"Number of clusters\": 24, \"davies bouldin score\": 1.2396816854045458}, {\"Number of clusters\": 25, \"davies bouldin score\": 1.1967368426452878}, {\"Number of clusters\": 26, \"davies bouldin score\": 1.2406281264259673}, {\"Number of clusters\": 27, \"davies bouldin score\": 1.1916216318348547}, {\"Number of clusters\": 28, \"davies bouldin score\": 1.1566538785995282}, {\"Number of clusters\": 29, \"davies bouldin score\": 1.2680386141465576}, {\"Number of clusters\": 30, \"davies bouldin score\": 1.122762785763744}, {\"Number of clusters\": 31, \"davies bouldin score\": 1.1264498945644017}, {\"Number of clusters\": 32, \"davies bouldin score\": 1.1946270767970608}, {\"Number of clusters\": 33, \"davies bouldin score\": 1.176427664032186}, {\"Number of clusters\": 34, \"davies bouldin score\": 1.1481893907838525}, {\"Number of clusters\": 35, \"davies bouldin score\": 1.162056609908475}, {\"Number of clusters\": 36, \"davies bouldin score\": 1.1489569797281034}, {\"Number of clusters\": 37, \"davies bouldin score\": 1.1300802991958399}, {\"Number of clusters\": 38, \"davies bouldin score\": 1.0850160946836496}, {\"Number of clusters\": 39, \"davies bouldin score\": 1.0679406209402313}, {\"Number of clusters\": 40, \"davies bouldin score\": 1.1094197290135606}, {\"Number of clusters\": 41, \"davies bouldin score\": 1.096262405387839}, {\"Number of clusters\": 42, \"davies bouldin score\": 1.0860875450059557}, {\"Number of clusters\": 43, \"davies bouldin score\": 1.0652417691468568}, {\"Number of clusters\": 44, \"davies bouldin score\": 1.1328489577496583}, {\"Number of clusters\": 45, \"davies bouldin score\": 1.0566593066777161}]}}, {\"mode\": \"vega-lite\"});\n</script>",
            "text/plain": "alt.Chart(...)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 46,
      "metadata": {},
      "id": "f6b71769-0ee5-48e8-9379-ff927bcf2b16"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4. Modeling"
      ],
      "metadata": {
        "papermill": {
          "duration": 1.872284,
          "end_time": "2021-04-22T18:45:55.674812",
          "exception": false,
          "start_time": "2021-04-22T18:45:53.802528",
          "status": "completed"
        },
        "tags": []
      },
      "id": "96c5d9b2"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4.1 Traning Models with H2O AutoML"
      ],
      "metadata": {},
      "id": "75140177"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4.1.1 Creating context and H2O and Importing data into the H2O context"
      ],
      "metadata": {
        "papermill": {
          "duration": 1.852401,
          "end_time": "2021-04-22T18:45:59.917491",
          "exception": false,
          "start_time": "2021-04-22T18:45:58.065090",
          "status": "completed"
        },
        "tags": []
      },
      "id": "60dfd052"
    },
    {
      "cell_type": "code",
      "source": [
        "# Number of threads, nthreads = -1, means use all cores on your machine\n",
        "# max_mem_size is the maximum memory (in GB) to allocate to H2O\n",
        "h2o.init(nthreads = -1)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Checking whether there is an H2O instance running at http://localhost:54321 ..... not found.\nAttempting to start a local H2O server...\n  Java Version: openjdk version \"11.0.17\" 2022-10-18; OpenJDK Runtime Environment (build 11.0.17+8-post-Ubuntu-1ubuntu220.04); OpenJDK 64-Bit Server VM (build 11.0.17+8-post-Ubuntu-1ubuntu220.04, mixed mode, sharing)\n  Starting server from /anaconda/envs/azureml_py38/lib/python3.8/site-packages/h2o/backend/bin/h2o.jar\n  Ice root: /tmp/tmp83h1qrfw\n  JVM stdout: /tmp/tmp83h1qrfw/h2o_azureuser_started_from_python.out\n  JVM stderr: /tmp/tmp83h1qrfw/h2o_azureuser_started_from_python.err\n  Server is running at http://127.0.0.1:54321\nConnecting to H2O server at http://127.0.0.1:54321 ... successful.\nWarning: Your H2O cluster version is too old (4 months and 10 days)!Please download and install the latest version from http://h2o.ai/download/\n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div style=\"overflow:auto\"><table style=\"width:50%\"><tr><td>H2O_cluster_uptime:</td>\n<td>05 secs</td></tr>\n<tr><td>H2O_cluster_timezone:</td>\n<td>Etc/UTC</td></tr>\n<tr><td>H2O_data_parsing_timezone:</td>\n<td>UTC</td></tr>\n<tr><td>H2O_cluster_version:</td>\n<td>3.36.1.3</td></tr>\n<tr><td>H2O_cluster_version_age:</td>\n<td>4 months and 10 days !!!</td></tr>\n<tr><td>H2O_cluster_name:</td>\n<td>H2O_from_python_azureuser_w0s9lm</td></tr>\n<tr><td>H2O_cluster_total_nodes:</td>\n<td>1</td></tr>\n<tr><td>H2O_cluster_free_memory:</td>\n<td>982 Mb</td></tr>\n<tr><td>H2O_cluster_total_cores:</td>\n<td>2</td></tr>\n<tr><td>H2O_cluster_allowed_cores:</td>\n<td>2</td></tr>\n<tr><td>H2O_cluster_status:</td>\n<td>locked, healthy</td></tr>\n<tr><td>H2O_connection_url:</td>\n<td>http://127.0.0.1:54321</td></tr>\n<tr><td>H2O_connection_proxy:</td>\n<td>{\"http\": null, \"https\": null}</td></tr>\n<tr><td>H2O_internal_security:</td>\n<td>False</td></tr>\n<tr><td>Python_version:</td>\n<td>3.8.5 final</td></tr></table></div>",
            "text/plain": "--------------------------  --------------------------------\nH2O_cluster_uptime:         05 secs\nH2O_cluster_timezone:       Etc/UTC\nH2O_data_parsing_timezone:  UTC\nH2O_cluster_version:        3.36.1.3\nH2O_cluster_version_age:    4 months and 10 days !!!\nH2O_cluster_name:           H2O_from_python_azureuser_w0s9lm\nH2O_cluster_total_nodes:    1\nH2O_cluster_free_memory:    982 Mb\nH2O_cluster_total_cores:    2\nH2O_cluster_allowed_cores:  2\nH2O_cluster_status:         locked, healthy\nH2O_connection_url:         http://127.0.0.1:54321\nH2O_connection_proxy:       {\"http\": null, \"https\": null}\nH2O_internal_security:      False\nPython_version:             3.8.5 final\n--------------------------  --------------------------------"
          },
          "metadata": {}
        }
      ],
      "execution_count": 48,
      "metadata": {
        "gather": {
          "logged": 1668732798079
        },
        "papermill": {
          "duration": 9.429937,
          "end_time": "2021-04-22T18:46:11.178938",
          "exception": false,
          "start_time": "2021-04-22T18:46:01.749001",
          "status": "completed"
        },
        "tags": []
      },
      "id": "76d4da38"
    },
    {
      "cell_type": "code",
      "source": [
        "#Import TRAINING base to the H20 context\n",
        "data_hdf = h2o.H2OFrame(dataprep_df.query('dataset == \"train\"').loc[:, (selected_features + normalized_and_dummy)])\n",
        "\n",
        "# Conversion of Target variables and categorical features to factor (enum)\n",
        "#no H2O it is necessary that the categorical variables are transformed into a factor\n",
        "for col_name in CAT:\n",
        "    data_hdf[col_name] = data_hdf[col_name].asfactor()\n",
        "for col_name in (NUM + normalized_and_dummy):\n",
        "    data_hdf[col_name] = data_hdf[col_name].asnumeric()\n",
        "    \n",
        "# Partition data into 90%, 10% chunks\n",
        "# Setting a seed will guarantee reproducibility\n",
        "train_hdf, valid_hdf = data_hdf.split_frame(ratios=[0.90], destination_frames=['train_hdf', 'valid_hdf'], seed=1)\n",
        "        \n",
        "#Notice that `split_frame()` uses approximate splitting not exact splitting (for efficiency), so these are not exactly 90%, 10% of the total rows.\n",
        "print('Training: ' + str(train_hdf.nrow))\n",
        "print('Validation: ' + str(valid_hdf.nrow))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\nTraining: 576\nValidation: 62\n"
        }
      ],
      "execution_count": 51,
      "metadata": {
        "gather": {
          "logged": 1668732815858
        },
        "papermill": {
          "duration": 6.347148,
          "end_time": "2021-04-22T18:46:19.457051",
          "exception": false,
          "start_time": "2021-04-22T18:46:13.109903",
          "status": "completed"
        },
        "tags": []
      },
      "id": "02669d63"
    },
    {
      "cell_type": "code",
      "source": [
        "#Import TEST base to the H20 context\n",
        "test_hdf = h2o.H2OFrame(dataprep_df.query('dataset == \"test\"').loc[:, (selected_features + normalized_and_dummy)])\n",
        "\n",
        "# Conversion of Target variables and categorical features to factor (enum)\n",
        "#no H2O it is necessary that the categorical variables are transformed into a factor\n",
        "for col_name in CAT:\n",
        "    test_hdf[col_name] = test_hdf[col_name].asfactor()\n",
        "for col_name in (NUM + normalized_and_dummy):\n",
        "    test_hdf[col_name] = test_hdf[col_name].asnumeric()\n",
        "    \n",
        "print('Test: ' + str(test_hdf.nrow))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\nTest: 214\n"
        }
      ],
      "execution_count": 52,
      "metadata": {
        "gather": {
          "logged": 1668732819634
        },
        "papermill": {
          "duration": 2.207041,
          "end_time": "2021-04-22T18:46:25.310701",
          "exception": false,
          "start_time": "2021-04-22T18:46:23.103660",
          "status": "completed"
        },
        "tags": []
      },
      "id": "d29d63d7"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4.2.2 Train the H2O Champion algorithm with new data"
      ],
      "metadata": {},
      "id": "285e288f"
    },
    {
      "cell_type": "code",
      "source": [
        "## This is the champion previous trained algorithms that will be used as comparison for the new experiments\n",
        "vModel='H2O_KMeans_'\n",
        "\n",
        "#Execution time of the model\n",
        "start = dt.datetime.now()\n",
        "\n",
        "from h2o.estimators import H2OKMeansEstimator\n",
        "kmeans = H2OKMeansEstimator(k=10,\n",
        "                                 estimate_k=True,\n",
        "                                 standardize=False,\n",
        "                                 seed=1)\n",
        "\n",
        "# The use of a validation_frame is recommended\n",
        "kmeans.train(x=normalized_and_dummy,\n",
        "                  training_frame=train_hdf,\n",
        "                  validation_frame=valid_hdf)\n",
        "\n",
        "#Execution time of the model\n",
        "stop = dt.datetime.now()\n",
        "execution_time = stop-start\n",
        "print(\"\\n\"+ \"Execution time: \" + str(execution_time) + \"\\n\")\n",
        "print(kmeans)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "kmeans Model Build progress: |"
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": "/anaconda/envs/azureml_py38/lib/python3.8/site-packages/h2o/estimators/estimator_base.py:208: RuntimeWarning: Dropping bad and constant columns: [dummy_NameTitle_Countess, dummy_NameTitle_Ms, dummy_Ticket_str_SCAH]\n  warnings.warn(mesg[\"message\"], RuntimeWarning)\n"
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "███████████████████████████████████████████████████| (done) 100%\n\nExecution time: 0:00:00.671864\n\nModel Details\n=============\nH2OKMeansEstimator :  K-means\nModel Key:  KMeans_model_python_1668871369808_1\n\n\nModel Summary: \n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>number_of_rows</th>\n      <th>number_of_clusters</th>\n      <th>number_of_categorical_columns</th>\n      <th>number_of_iterations</th>\n      <th>within_cluster_sum_of_squares</th>\n      <th>total_sum_of_squares</th>\n      <th>between_cluster_sum_of_squares</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>576.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>22.0</td>\n      <td>777.020667</td>\n      <td>1415.752349</td>\n      <td>638.731681</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "     number_of_rows  number_of_clusters  number_of_categorical_columns  \\\n0             576.0                 5.0                            0.0   \n\n   number_of_iterations  within_cluster_sum_of_squares  total_sum_of_squares  \\\n0                  22.0                     777.020667           1415.752349   \n\n   between_cluster_sum_of_squares  \n0                      638.731681  "
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\n\nModelMetricsClustering: kmeans\n** Reported on train data. **\n\nTotal Within Cluster Sum of Square Error: 777.0206683126084\nTotal Sum of Square Error to Grand Mean: 1415.7523497402256\nBetween Cluster Sum of Square Error: 638.7316814276171\n\nCentroid Statistics: \n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>centroid</th>\n      <th>size</th>\n      <th>within_cluster_sum_of_squares</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>1.0</td>\n      <td>84.0</td>\n      <td>188.348599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>2.0</td>\n      <td>77.0</td>\n      <td>77.775373</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>3.0</td>\n      <td>220.0</td>\n      <td>190.857716</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>4.0</td>\n      <td>114.0</td>\n      <td>188.092222</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>5.0</td>\n      <td>81.0</td>\n      <td>131.946758</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "     centroid   size  within_cluster_sum_of_squares\n0         1.0   84.0                     188.348599\n1         2.0   77.0                      77.775373\n2         3.0  220.0                     190.857716\n3         4.0  114.0                     188.092222\n4         5.0   81.0                     131.946758"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nModelMetricsClustering: kmeans\n** Reported on validation data. **\n\nTotal Within Cluster Sum of Square Error: 82.1060778506546\nTotal Sum of Square Error to Grand Mean: 142.27454179920156\nBetween Cluster Sum of Square Error: 60.16846394854696\n\nCentroid Statistics: \n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>centroid</th>\n      <th>size</th>\n      <th>within_cluster_sum_of_squares</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>1.0</td>\n      <td>7.0</td>\n      <td>17.523469</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>2.0</td>\n      <td>8.0</td>\n      <td>8.275877</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>3.0</td>\n      <td>24.0</td>\n      <td>21.171916</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>4.0</td>\n      <td>13.0</td>\n      <td>15.986928</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>5.0</td>\n      <td>10.0</td>\n      <td>19.147889</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "     centroid  size  within_cluster_sum_of_squares\n0         1.0   7.0                      17.523469\n1         2.0   8.0                       8.275877\n2         3.0  24.0                      21.171916\n3         4.0  13.0                      15.986928\n4         5.0  10.0                      19.147889"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nScoring History: \n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>timestamp</th>\n      <th>duration</th>\n      <th>iterations</th>\n      <th>number_of_clusters</th>\n      <th>number_of_reassigned_observations</th>\n      <th>within_cluster_sum_of_squares</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.088 sec</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.191 sec</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>576.0</td>\n      <td>4198.006204</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.211 sec</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>1415.752349</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.257 sec</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>1251.887442</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.285 sec</td>\n      <td>4.0</td>\n      <td>3.0</td>\n      <td>12.0</td>\n      <td>1037.978588</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.295 sec</td>\n      <td>5.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>1036.285412</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.312 sec</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>1027.515345</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.319 sec</td>\n      <td>7.0</td>\n      <td>4.0</td>\n      <td>19.0</td>\n      <td>1018.233300</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.325 sec</td>\n      <td>8.0</td>\n      <td>4.0</td>\n      <td>25.0</td>\n      <td>988.917659</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.330 sec</td>\n      <td>9.0</td>\n      <td>4.0</td>\n      <td>33.0</td>\n      <td>976.305702</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.334 sec</td>\n      <td>10.0</td>\n      <td>4.0</td>\n      <td>48.0</td>\n      <td>932.235421</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.339 sec</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>17.0</td>\n      <td>893.412064</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.344 sec</td>\n      <td>12.0</td>\n      <td>4.0</td>\n      <td>17.0</td>\n      <td>884.019806</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.350 sec</td>\n      <td>13.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>877.497326</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.354 sec</td>\n      <td>14.0</td>\n      <td>4.0</td>\n      <td>2.0</td>\n      <td>877.195352</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.359 sec</td>\n      <td>15.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>877.022247</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.368 sec</td>\n      <td>16.0</td>\n      <td>5.0</td>\n      <td>2.0</td>\n      <td>869.397204</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.373 sec</td>\n      <td>17.0</td>\n      <td>5.0</td>\n      <td>4.0</td>\n      <td>864.466506</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.378 sec</td>\n      <td>18.0</td>\n      <td>5.0</td>\n      <td>8.0</td>\n      <td>858.744246</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td></td>\n      <td>2022-11-19 15:25:36</td>\n      <td>0.383 sec</td>\n      <td>19.0</td>\n      <td>5.0</td>\n      <td>35.0</td>\n      <td>846.877543</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "                timestamp    duration  iterations  number_of_clusters  \\\n0     2022-11-19 15:25:36   0.088 sec         0.0                 0.0   \n1     2022-11-19 15:25:36   0.191 sec         1.0                 1.0   \n2     2022-11-19 15:25:36   0.211 sec         2.0                 1.0   \n3     2022-11-19 15:25:36   0.257 sec         3.0                 2.0   \n4     2022-11-19 15:25:36   0.285 sec         4.0                 3.0   \n5     2022-11-19 15:25:36   0.295 sec         5.0                 3.0   \n6     2022-11-19 15:25:36   0.312 sec         6.0                 4.0   \n7     2022-11-19 15:25:36   0.319 sec         7.0                 4.0   \n8     2022-11-19 15:25:36   0.325 sec         8.0                 4.0   \n9     2022-11-19 15:25:36   0.330 sec         9.0                 4.0   \n10    2022-11-19 15:25:36   0.334 sec        10.0                 4.0   \n11    2022-11-19 15:25:36   0.339 sec        11.0                 4.0   \n12    2022-11-19 15:25:36   0.344 sec        12.0                 4.0   \n13    2022-11-19 15:25:36   0.350 sec        13.0                 4.0   \n14    2022-11-19 15:25:36   0.354 sec        14.0                 4.0   \n15    2022-11-19 15:25:36   0.359 sec        15.0                 4.0   \n16    2022-11-19 15:25:36   0.368 sec        16.0                 5.0   \n17    2022-11-19 15:25:36   0.373 sec        17.0                 5.0   \n18    2022-11-19 15:25:36   0.378 sec        18.0                 5.0   \n19    2022-11-19 15:25:36   0.383 sec        19.0                 5.0   \n\n    number_of_reassigned_observations  within_cluster_sum_of_squares  \n0                                 NaN                            NaN  \n1                               576.0                    4198.006204  \n2                                 0.0                    1415.752349  \n3                                 0.0                    1251.887442  \n4                                12.0                    1037.978588  \n5                                 0.0                    1036.285412  \n6                                 5.0                    1027.515345  \n7                                19.0                    1018.233300  \n8                                25.0                     988.917659  \n9                                33.0                     976.305702  \n10                               48.0                     932.235421  \n11                               17.0                     893.412064  \n12                               17.0                     884.019806  \n13                                2.0                     877.497326  \n14                                2.0                     877.195352  \n15                                0.0                     877.022247  \n16                                2.0                     869.397204  \n17                                4.0                     864.466506  \n18                                8.0                     858.744246  \n19                               35.0                     846.877543  "
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nSee the whole table with table.as_data_frame()\n\n"
        }
      ],
      "execution_count": 53,
      "metadata": {
        "gather": {
          "logged": 1668732843145
        },
        "tags": []
      },
      "id": "cf961eb3"
    },
    {
      "cell_type": "code",
      "source": [
        "perf = kmeans.model_performance()\n",
        "perf"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "\nModelMetricsClustering: kmeans\n** Reported on train data. **\n\nTotal Within Cluster Sum of Square Error: 777.0206683126084\nTotal Sum of Square Error to Grand Mean: 1415.7523497402256\nBetween Cluster Sum of Square Error: 638.7316814276171\n\nCentroid Statistics: \n"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>centroid</th>\n      <th>size</th>\n      <th>within_cluster_sum_of_squares</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>1.0</td>\n      <td>84.0</td>\n      <td>188.348599</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>2.0</td>\n      <td>77.0</td>\n      <td>77.775373</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>3.0</td>\n      <td>220.0</td>\n      <td>190.857716</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>4.0</td>\n      <td>114.0</td>\n      <td>188.092222</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>5.0</td>\n      <td>81.0</td>\n      <td>131.946758</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "     centroid   size  within_cluster_sum_of_squares\n0         1.0   84.0                     188.348599\n1         2.0   77.0                      77.775373\n2         3.0  220.0                     190.857716\n3         4.0  114.0                     188.092222\n4         5.0   81.0                     131.946758"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "execution_count": 54,
          "data": {
            "text/plain": ""
          },
          "metadata": {}
        }
      ],
      "execution_count": 54,
      "metadata": {
        "gather": {
          "logged": 1668732866840
        }
      },
      "id": "2f869b34-0297-4d1a-af69-916343869fb8"
    },
    {
      "cell_type": "code",
      "source": [
        "#Consider all models in the history ./models/candidates/performance_*.csv. To disregard any old version, set erase_modelos = \"S\":\n",
        "apagar_modelos = 'N'\n",
        "if apagar_modelos == 'S':\n",
        "    os.system('rm %s/models/candidates/performance_*.csv' % OutputPath)"
      ],
      "outputs": [],
      "execution_count": 55,
      "metadata": {
        "gather": {
          "logged": 1668732872884
        },
        "papermill": {
          "duration": 2.142011,
          "end_time": "2021-04-22T19:08:36.084630",
          "exception": false,
          "start_time": "2021-04-22T19:08:33.942619",
          "status": "completed"
        },
        "tags": []
      },
      "id": "c57e2270"
    },
    {
      "cell_type": "code",
      "source": [
        "h2o.save_model(model=kmeans, path='%s/models/candidates/' % OutputPath, force=True)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 56,
          "data": {
            "text/plain": "'/mnt/batch/tasks/shared/LS_root/mounts/clusters/maxdez1/code/Users/maxdez/FIEP-Machine-Learning-e-Computacao-em-Nuvem/clusters_segmentation/output_model/models/candidates/KMeans_model_python_1668871369808_1'"
          },
          "metadata": {}
        }
      ],
      "execution_count": 56,
      "metadata": {
        "gather": {
          "logged": 1668732875954
        }
      },
      "id": "00b2d16d-2d1c-4845-b7f6-41c259082a42"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5. Exporting the best model to Deploy (Usar o path_model_mojo para o código 3_Explaining_Model.ipynb)"
      ],
      "metadata": {
        "papermill": {
          "duration": 2.252429,
          "end_time": "2021-04-22T19:09:24.187954",
          "exception": false,
          "start_time": "2021-04-22T19:09:21.935525",
          "status": "completed"
        },
        "tags": []
      },
      "id": "c3681ca2"
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    #Save the H2O model in MOJO format and all the variables of the best model\n",
        "    melhor_modelo = h2o.load_model('%s/models/candidates/%s' % (OutputPath, kmeans.model_id))\n",
        "    path_model_mojo = melhor_modelo.download_mojo('%s/models/best/' % OutputPath, get_genmodel_jar=True)\n",
        "    print('path_model_mojo: ' + str(path_model_mojo))\n",
        "    caminho_modelo_h2o = h2o.save_model(model=melhor_modelo, path='%s/models/best/' % OutputPath, force=True)\n",
        "except Exception as e:\n",
        "    print(e)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "path_model_mojo: /mnt/batch/tasks/shared/LS_root/mounts/clusters/maxdez1/code/Users/maxdez/FIEP-Machine-Learning-e-Computacao-em-Nuvem/clusters_segmentation/output_model/models/best/KMeans_model_python_1668871369808_1.zip\n"
        }
      ],
      "execution_count": 63,
      "metadata": {
        "gather": {
          "logged": 1668732882627
        },
        "papermill": {
          "duration": 2.363826,
          "end_time": "2021-04-22T19:09:28.770800",
          "exception": false,
          "start_time": "2021-04-22T19:09:26.406974",
          "status": "completed"
        },
        "tags": []
      },
      "id": "f4f87587"
    },
    {
      "cell_type": "code",
      "source": [
        "#Confusion Matrix for the Champion\n",
        "df_cluster_tmp = h2o.mojo_predict_pandas(dataprep_df.loc[:, (normalized_and_dummy)], mojo_zip_path=path_model_mojo, verbose=False)\n",
        "\n",
        "df_cluster = pd.concat([df_cluster_tmp.reset_index(drop=True), dataprep_df.loc[:, (normalized_and_dummy+selected_features+['dataset'])].reset_index(drop=True)], axis=1)\n",
        "# df_cluster['cluster'] = df_cluster['cluster'] + 1\n",
        "df_cluster['cluster'] = df_cluster['cluster'].astype(int)\n",
        "\n",
        "df_cluster"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Detected 4 unused columns in the input data set: {,dummy_NameTitle_Ms,dummy_Ticket_str_SCAH,dummy_NameTitle_Countess}\n"
        },
        {
          "output_type": "execute_result",
          "execution_count": 64,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cluster</th>\n      <th>dummy_Pclass_2</th>\n      <th>dummy_Pclass_3</th>\n      <th>dummy_Embarked_Missing</th>\n      <th>dummy_Embarked_Q</th>\n      <th>dummy_Embarked_S</th>\n      <th>dummy_cabine_prefix_B</th>\n      <th>dummy_cabine_prefix_C</th>\n      <th>dummy_cabine_prefix_D</th>\n      <th>dummy_cabine_prefix_E</th>\n      <th>...</th>\n      <th>cabine_prefix</th>\n      <th>Ticket_str</th>\n      <th>NameTitle</th>\n      <th>Sex</th>\n      <th>Fare</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Age_Mean</th>\n      <th>Ticket_int</th>\n      <th>dataset</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>missing</td>\n      <td>A</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>7.2500</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>22.000000</td>\n      <td>521171.0</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>C</td>\n      <td>PC</td>\n      <td>Mrs</td>\n      <td>female</td>\n      <td>71.2833</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>38.000000</td>\n      <td>17599.0</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>C</td>\n      <td>missing</td>\n      <td>Mrs</td>\n      <td>female</td>\n      <td>53.1000</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>35.000000</td>\n      <td>113803.0</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>missing</td>\n      <td>missing</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>8.0500</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>35.000000</td>\n      <td>373450.0</td>\n      <td>test</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>missing</td>\n      <td>missing</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>8.4583</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>29.699118</td>\n      <td>330877.0</td>\n      <td>test</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>847</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>missing</td>\n      <td>missing</td>\n      <td>LOW</td>\n      <td>male</td>\n      <td>13.0000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>27.000000</td>\n      <td>211536.0</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>848</th>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>B</td>\n      <td>missing</td>\n      <td>Miss</td>\n      <td>female</td>\n      <td>30.0000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>19.000000</td>\n      <td>112053.0</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>849</th>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>missing</td>\n      <td>WC</td>\n      <td>Miss</td>\n      <td>female</td>\n      <td>23.4500</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>29.699118</td>\n      <td>6607.0</td>\n      <td>train</td>\n    </tr>\n    <tr>\n      <th>850</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>C</td>\n      <td>missing</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>30.0000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>26.000000</td>\n      <td>111369.0</td>\n      <td>test</td>\n    </tr>\n    <tr>\n      <th>851</th>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>missing</td>\n      <td>missing</td>\n      <td>Mr</td>\n      <td>male</td>\n      <td>7.7500</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>32.000000</td>\n      <td>370376.0</td>\n      <td>train</td>\n    </tr>\n  </tbody>\n</table>\n<p>852 rows × 59 columns</p>\n</div>",
            "text/plain": "     cluster  dummy_Pclass_2  dummy_Pclass_3  dummy_Embarked_Missing  \\\n0          2               0               1                       0   \n1          0               0               0                       0   \n2          4               0               0                       0   \n3          2               0               1                       0   \n4          2               0               1                       0   \n..       ...             ...             ...                     ...   \n847        1               1               0                       0   \n848        3               0               0                       0   \n849        3               0               1                       0   \n850        0               0               0                       0   \n851        2               0               1                       0   \n\n     dummy_Embarked_Q  dummy_Embarked_S  dummy_cabine_prefix_B  \\\n0                   0                 1                      0   \n1                   0                 0                      0   \n2                   0                 1                      0   \n3                   0                 1                      0   \n4                   1                 0                      0   \n..                ...               ...                    ...   \n847                 0                 1                      0   \n848                 0                 1                      1   \n849                 0                 1                      0   \n850                 0                 0                      0   \n851                 1                 0                      0   \n\n     dummy_cabine_prefix_C  dummy_cabine_prefix_D  dummy_cabine_prefix_E  ...  \\\n0                        0                      0                      0  ...   \n1                        1                      0                      0  ...   \n2                        1                      0                      0  ...   \n3                        0                      0                      0  ...   \n4                        0                      0                      0  ...   \n..                     ...                    ...                    ...  ...   \n847                      0                      0                      0  ...   \n848                      0                      0                      0  ...   \n849                      0                      0                      0  ...   \n850                      1                      0                      0  ...   \n851                      0                      0                      0  ...   \n\n     cabine_prefix  Ticket_str  NameTitle     Sex     Fare  SibSp  Parch  \\\n0          missing           A         Mr    male   7.2500    1.0    0.0   \n1                C          PC        Mrs  female  71.2833    1.0    0.0   \n2                C     missing        Mrs  female  53.1000    1.0    0.0   \n3          missing     missing         Mr    male   8.0500    0.0    0.0   \n4          missing     missing         Mr    male   8.4583    0.0    0.0   \n..             ...         ...        ...     ...      ...    ...    ...   \n847        missing     missing        LOW    male  13.0000    0.0    0.0   \n848              B     missing       Miss  female  30.0000    0.0    0.0   \n849        missing          WC       Miss  female  23.4500    1.0    2.0   \n850              C     missing         Mr    male  30.0000    0.0    0.0   \n851        missing     missing         Mr    male   7.7500    0.0    0.0   \n\n      Age_Mean  Ticket_int  dataset  \n0    22.000000    521171.0    train  \n1    38.000000     17599.0    train  \n2    35.000000    113803.0    train  \n3    35.000000    373450.0     test  \n4    29.699118    330877.0     test  \n..         ...         ...      ...  \n847  27.000000    211536.0    train  \n848  19.000000    112053.0    train  \n849  29.699118      6607.0    train  \n850  26.000000    111369.0     test  \n851  32.000000    370376.0    train  \n\n[852 rows x 59 columns]"
          },
          "metadata": {}
        }
      ],
      "execution_count": 64,
      "metadata": {
        "gather": {
          "logged": 1668732923693
        },
        "tags": []
      },
      "id": "545ea64f"
    },
    {
      "cell_type": "code",
      "source": [
        "df_cluster_plot = df_cluster.reset_index().groupby(['cluster']).count()[['index']].rename(columns={'index': 'qty'})\n",
        "sns.heatmap(df_cluster_plot, annot=True, center=True,cmap='Blues', fmt='g')\n",
        "plt.show()\n",
        "sns.heatmap(df_cluster_plot/np.sum(df_cluster_plot), annot=True,\n",
        "            fmt='.2%', cmap='Blues')\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 640x480 with 2 Axes>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 640x480 with 2 Axes>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 65,
      "metadata": {
        "gather": {
          "logged": 1668732930614
        }
      },
      "id": "4bfd2e5e-e582-4fb1-8f95-99dd495df613"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 6. Save final dataset with predictions to CSV to explain the model"
      ],
      "metadata": {},
      "id": "29169849"
    },
    {
      "cell_type": "code",
      "source": [
        "df_cluster.to_csv('./titanic/df_cluster.csv', index=False, header=True)"
      ],
      "outputs": [],
      "execution_count": 66,
      "metadata": {
        "gather": {
          "logged": 1668734220670
        },
        "tags": []
      },
      "id": "9c9bfee2"
    }
  ],
  "metadata": {
    "instance_type": "ml.t3.medium",
    "kernel_info": {
      "name": "python38-azureml"
    },
    "kernelspec": {
      "display_name": "Python 3.8 - AzureML",
      "language": "python",
      "name": "python38-azureml"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "papermill": {
      "output_path": "__notebook__.ipynb",
      "default_parameters": {},
      "start_time": "2021-04-22T18:42:26.701971",
      "parameters": {},
      "environment_variables": {},
      "exception": null,
      "end_time": "2021-04-22T19:12:51.593458",
      "duration": 1824.891487,
      "version": "2.3.2",
      "input_path": "__notebook__.ipynb"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "state": {
          "a8d065cce96144b3abede928e48b70d6": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "1e1865bed82a4c90a94b4024f9c7b585": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "6b28a19b4fc34c7a8e973878b6f7c0a9": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "ProgressStyleModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "ProgressStyleModel",
              "_model_module": "@jupyter-widgets/controls",
              "description_width": "",
              "_view_name": "StyleView",
              "_view_module": "@jupyter-widgets/base",
              "_view_count": null,
              "bar_color": null,
              "_model_module_version": "1.5.0"
            }
          },
          "350e60f28d9b48938c8cd3c7a65adfc8": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "6d4bcb70a3e940619712a90fd9ee4cef": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "72b6da2d33514ad78863f8abc472304d": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "7fc985fe271c400f8d922006f845e02d": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "ProgressStyleModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "ProgressStyleModel",
              "_model_module": "@jupyter-widgets/controls",
              "description_width": "",
              "_view_name": "StyleView",
              "_view_module": "@jupyter-widgets/base",
              "_view_count": null,
              "bar_color": null,
              "_model_module_version": "1.5.0"
            }
          },
          "e6074bcf78cb4f2eab2fd3728ecc3838": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "1960307545e444afa597f3ae9e570980": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "4f4eb35c26b1492798fee9d3c4e5bb03": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_bd08b7d0ff3a427d89a418e30f1ab16c",
              "value": " 50/50 [01:24&lt;00:00,  4.61s/it, Completed]",
              "style": "IPY_MODEL_74688d13d99042c0aa1f214ded632a98",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "6f17d9d9c82c4179a703e6b4b458dcb2": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "7fa7a452971a43f893f67bea5d998d27": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "1367ae52c04143d8b569a2018607131f": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_cf0f1a3dba55429b94630faccf8f142f",
              "value": " 20/20 [01:30&lt;00:00,  4.10s/it]",
              "style": "IPY_MODEL_8003ac93421f49c0bcc8412a93783fdc",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "8bc5b0e540704062bebfd2be22d96e03": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "ProgressStyleModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "ProgressStyleModel",
              "_model_module": "@jupyter-widgets/controls",
              "description_width": "",
              "_view_name": "StyleView",
              "_view_module": "@jupyter-widgets/base",
              "_view_count": null,
              "bar_color": null,
              "_model_module_version": "1.5.0"
            }
          },
          "55b5e671bdc54737914052f021be0b42": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_1f6013e469f44bae906f8b8d796ddf03",
              "value": " 1/1 [00:00&lt;00:00,  5.95it/s]",
              "style": "IPY_MODEL_1c7de68230104c4995b47fa29a599fc3",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "5474ed5e459a4b07973ac3c6de3ae6e4": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_c4aa5744ad87433dbf595d79c833656c",
              "value": "Render HTML: 100%",
              "style": "IPY_MODEL_1960307545e444afa597f3ae9e570980",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "e367d8585ece43f3a5a07d2baf9a7f18": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HBoxModel",
            "state": {
              "_view_module_version": "1.5.0",
              "_model_name": "HBoxModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HBoxView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_b0790db729a74457b1d381473d748b8a",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "box_style": "",
              "children": [
                "IPY_MODEL_7d988be3a23740abb4b092b50a7de2b0",
                "IPY_MODEL_7dc03db759c64b779a38890f763846f6",
                "IPY_MODEL_a9a926e54eb9475da96c6213bac01c20"
              ]
            }
          },
          "a9f8a338fef14fa4822404f98c9e4b01": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "FloatProgressModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "FloatProgressModel",
              "_model_module": "@jupyter-widgets/controls",
              "max": 1,
              "bar_style": "success",
              "_view_name": "ProgressView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_adf7c0b9f9ad4328a5caec0007d0d89c",
              "orientation": "horizontal",
              "value": 1,
              "style": "IPY_MODEL_8bc5b0e540704062bebfd2be22d96e03",
              "min": 0,
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "c46b4f3793fa4e229cb30cfb2db5b75b": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "8003ac93421f49c0bcc8412a93783fdc": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "8f4ad3ed9b624449bb3951c1b78206d7": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HBoxModel",
            "state": {
              "_view_module_version": "1.5.0",
              "_model_name": "HBoxModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HBoxView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_8b62d842cd4f41b79aa6da6cec427083",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "box_style": "",
              "children": [
                "IPY_MODEL_5474ed5e459a4b07973ac3c6de3ae6e4",
                "IPY_MODEL_90e6c04395594a2baea9e529efd6cafb",
                "IPY_MODEL_b1a09a450d25455fb7d6f0fda505bb00"
              ]
            }
          },
          "98237f92a3e04185a26d148ebfd67b53": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "76c56e1e33a7431492e707c94f679aca": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HBoxModel",
            "state": {
              "_view_module_version": "1.5.0",
              "_model_name": "HBoxModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HBoxView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_aa3e16338d604e4eb9a39e0299403146",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "box_style": "",
              "children": [
                "IPY_MODEL_ede833cb0df046c5a6a4d4ccd16aa2e3",
                "IPY_MODEL_f56bfc6a11e948e28d78ea2301c2f477",
                "IPY_MODEL_1367ae52c04143d8b569a2018607131f"
              ]
            }
          },
          "b8b02491395045f5875ce167c0210c27": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "8b71ddb9a01d466b91484d1f3e7d96af": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "bd08b7d0ff3a427d89a418e30f1ab16c": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "786c2267f8114517950e53245ae33022": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HBoxModel",
            "state": {
              "_view_module_version": "1.5.0",
              "_model_name": "HBoxModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HBoxView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_b8b02491395045f5875ce167c0210c27",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "box_style": "",
              "children": [
                "IPY_MODEL_ba18d469602341cf9a58cf3b0b22aea9",
                "IPY_MODEL_a4c3d9944af64d68b4ebc01e5dd2437c",
                "IPY_MODEL_4f4eb35c26b1492798fee9d3c4e5bb03"
              ]
            }
          },
          "f56bfc6a11e948e28d78ea2301c2f477": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "FloatProgressModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "FloatProgressModel",
              "_model_module": "@jupyter-widgets/controls",
              "max": 20,
              "bar_style": "success",
              "_view_name": "ProgressView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_350e60f28d9b48938c8cd3c7a65adfc8",
              "orientation": "horizontal",
              "value": 20,
              "style": "IPY_MODEL_e4589928473345f786402b635e35a412",
              "min": 0,
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "d047c358579f42de823c513d8b87bd54": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "ProgressStyleModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "ProgressStyleModel",
              "_model_module": "@jupyter-widgets/controls",
              "description_width": "",
              "_view_name": "StyleView",
              "_view_module": "@jupyter-widgets/base",
              "_view_count": null,
              "bar_color": null,
              "_model_module_version": "1.5.0"
            }
          },
          "90e6c04395594a2baea9e529efd6cafb": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "FloatProgressModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "FloatProgressModel",
              "_model_module": "@jupyter-widgets/controls",
              "max": 1,
              "bar_style": "success",
              "_view_name": "ProgressView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_a8d065cce96144b3abede928e48b70d6",
              "orientation": "horizontal",
              "value": 1,
              "style": "IPY_MODEL_6b28a19b4fc34c7a8e973878b6f7c0a9",
              "min": 0,
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "1c7de68230104c4995b47fa29a599fc3": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "74688d13d99042c0aa1f214ded632a98": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "ede833cb0df046c5a6a4d4ccd16aa2e3": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_98237f92a3e04185a26d148ebfd67b53",
              "value": "100%",
              "style": "IPY_MODEL_762e5b00a7ec49938287a92e9a580d19",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "aa3e16338d604e4eb9a39e0299403146": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "b0790db729a74457b1d381473d748b8a": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "8b62d842cd4f41b79aa6da6cec427083": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "adf7c0b9f9ad4328a5caec0007d0d89c": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "f599ccf3d064469b90cc2bb818d0d8cb": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "1f6013e469f44bae906f8b8d796ddf03": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "2816683bca8b403393d16ddce7f61451": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "1aaccbf8980a4a87b279c54c0cd6ecdd": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "aac3cc7d1f2849cebbc45462095c0a48": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "ec581eeca781490e94efaccfad85d37b": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HBoxModel",
            "state": {
              "_view_module_version": "1.5.0",
              "_model_name": "HBoxModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HBoxView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_1aaccbf8980a4a87b279c54c0cd6ecdd",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "box_style": "",
              "children": [
                "IPY_MODEL_19f5b02e6d3145de9146687274a9b90d",
                "IPY_MODEL_a9f8a338fef14fa4822404f98c9e4b01",
                "IPY_MODEL_55b5e671bdc54737914052f021be0b42"
              ]
            }
          },
          "cf0f1a3dba55429b94630faccf8f142f": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "b1a09a450d25455fb7d6f0fda505bb00": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_6f17d9d9c82c4179a703e6b4b458dcb2",
              "value": " 1/1 [00:29&lt;00:00, 29.17s/it]",
              "style": "IPY_MODEL_6d4bcb70a3e940619712a90fd9ee4cef",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "a4c3d9944af64d68b4ebc01e5dd2437c": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "FloatProgressModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "FloatProgressModel",
              "_model_module": "@jupyter-widgets/controls",
              "max": 50,
              "bar_style": "success",
              "_view_name": "ProgressView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_c46b4f3793fa4e229cb30cfb2db5b75b",
              "orientation": "horizontal",
              "value": 50,
              "style": "IPY_MODEL_7fc985fe271c400f8d922006f845e02d",
              "min": 0,
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "e4589928473345f786402b635e35a412": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "ProgressStyleModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "ProgressStyleModel",
              "_model_module": "@jupyter-widgets/controls",
              "description_width": "",
              "_view_name": "StyleView",
              "_view_module": "@jupyter-widgets/base",
              "_view_count": null,
              "bar_color": null,
              "_model_module_version": "1.5.0"
            }
          },
          "7d988be3a23740abb4b092b50a7de2b0": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_aac3cc7d1f2849cebbc45462095c0a48",
              "value": "Generate report structure: 100%",
              "style": "IPY_MODEL_552e9ee63afb4e9f9437d29dadcbe0ee",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "19f5b02e6d3145de9146687274a9b90d": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_72b6da2d33514ad78863f8abc472304d",
              "value": "Export report to file: 100%",
              "style": "IPY_MODEL_7fa7a452971a43f893f67bea5d998d27",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "552e9ee63afb4e9f9437d29dadcbe0ee": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "762e5b00a7ec49938287a92e9a580d19": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "DescriptionStyleModel",
            "state": {
              "_model_module": "@jupyter-widgets/controls",
              "_model_module_version": "1.5.0",
              "_model_name": "DescriptionStyleModel",
              "_view_count": null,
              "_view_module": "@jupyter-widgets/base",
              "_view_module_version": "1.2.0",
              "_view_name": "StyleView",
              "description_width": ""
            }
          },
          "a9a926e54eb9475da96c6213bac01c20": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_1e1865bed82a4c90a94b4024f9c7b585",
              "value": " 1/1 [00:11&lt;00:00, 11.20s/it]",
              "style": "IPY_MODEL_e6074bcf78cb4f2eab2fd3728ecc3838",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "c4aa5744ad87433dbf595d79c833656c": {
            "model_module": "@jupyter-widgets/base",
            "model_module_version": "1.2.0",
            "model_name": "LayoutModel",
            "state": {
              "_view_module_version": "1.2.0",
              "_model_name": "LayoutModel",
              "grid_row": null,
              "_model_module": "@jupyter-widgets/base",
              "overflow": null,
              "max_height": null,
              "display": null,
              "grid_auto_flow": null,
              "grid_template_rows": null,
              "align_self": null,
              "grid_auto_columns": null,
              "width": null,
              "grid_area": null,
              "align_items": null,
              "_view_name": "LayoutView",
              "left": null,
              "height": null,
              "_view_module": "@jupyter-widgets/base",
              "object_position": null,
              "justify_content": null,
              "bottom": null,
              "max_width": null,
              "border": null,
              "margin": null,
              "order": null,
              "grid_column": null,
              "grid_auto_rows": null,
              "padding": null,
              "grid_template_columns": null,
              "justify_items": null,
              "object_fit": null,
              "visibility": null,
              "_view_count": null,
              "flex_flow": null,
              "min_height": null,
              "top": null,
              "min_width": null,
              "flex": null,
              "_model_module_version": "1.2.0",
              "grid_template_areas": null,
              "overflow_x": null,
              "right": null,
              "overflow_y": null,
              "grid_gap": null,
              "align_content": null
            }
          },
          "7dc03db759c64b779a38890f763846f6": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "FloatProgressModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "FloatProgressModel",
              "_model_module": "@jupyter-widgets/controls",
              "max": 1,
              "bar_style": "success",
              "_view_name": "ProgressView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_f599ccf3d064469b90cc2bb818d0d8cb",
              "orientation": "horizontal",
              "value": 1,
              "style": "IPY_MODEL_d047c358579f42de823c513d8b87bd54",
              "min": 0,
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          },
          "ba18d469602341cf9a58cf3b0b22aea9": {
            "model_module": "@jupyter-widgets/controls",
            "model_module_version": "1.5.0",
            "model_name": "HTMLModel",
            "state": {
              "_view_module_version": "1.5.0",
              "description_tooltip": null,
              "_model_name": "HTMLModel",
              "_model_module": "@jupyter-widgets/controls",
              "_view_name": "HTMLView",
              "_view_module": "@jupyter-widgets/controls",
              "_dom_classes": [],
              "layout": "IPY_MODEL_8b71ddb9a01d466b91484d1f3e7d96af",
              "value": "Summarize dataset: 100%",
              "style": "IPY_MODEL_2816683bca8b403393d16ddce7f61451",
              "placeholder": "​",
              "_view_count": null,
              "_model_module_version": "1.5.0",
              "description": ""
            }
          }
        },
        "version_major": 2,
        "version_minor": 0
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}